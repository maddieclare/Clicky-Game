{"version":3,"sources":["keys.js","Stats.js","Image.js","Gallery.js","serviceWorker.js","index.js"],"names":["module","exports","root","accessKey","secretKey","Stats","score","lives","Image","url","alt","id","status","key","className","src","onClick","alert","console","log","Gallery","React","useState","images","setImages","setIsLoaded","useEffect","count","apiRoot","keys","axios","get","then","results","data","fetchImages","uk-grid","map","image","index","urls","thumb","description","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qIAAAA,EAAOC,QAAU,CACbC,KAAM,2BACNC,UAAW,8CACXC,UAAW,gD,gJCEAC,EALH,CACVC,MAAO,EACPC,MAAO,GCCM,SAASC,EAAT,GAA+C,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,IAsBpD,OACE,6BACE,yBACEC,UAAU,mDACVF,OAAO,YACPC,IAAKA,GAEL,yBACEC,UAAU,eACVC,IAAKN,EACLC,IAAKA,EACLC,GAAIA,EACJK,QAjCS,WACA,YAAXJ,GACFK,MAAM,mCACNZ,EAAMC,OAAS,EACfW,MAAM,kBAAoBZ,EAAMC,OAChCD,EAAME,OAAS,EACfU,MAAM,oBAAsBZ,EAAME,OAC9BF,EAAME,OAAS,GACjBU,MAAM,eAERC,QAAQC,IAAId,EAAMC,QACE,cAAXM,IACTP,EAAMC,OAAS,EACfW,MAAM,YACNA,MAAM,kBAAoBZ,EAAMC,OAChCM,EAAS,YAmBLA,OAAQA,M,sBCqBHQ,EA9CD,WAAO,IAAD,EACUC,IAAMC,SAAS,IADzB,mBACXC,EADW,KACHC,EADG,OAEYH,IAAMC,UAAS,GAF3B,mBAEHG,GAFG,WAoBlB,OAJAJ,IAAMK,WAAU,YAZI,WAAiB,IAAhBC,EAAe,uDAAP,GACrBC,EAAUC,IAAK3B,KACfC,EAAY0B,IAAK1B,UAEvB2B,IACGC,IADH,UACUH,EADV,oCAC6CzB,EAD7C,kBACgEwB,IAC7DK,MAAK,SAAAC,GACJT,EAAU,GAAD,mBAAKD,GAAL,YAAgBU,EAAQC,QACjCT,GAAY,MAKhBU,KACC,IAGD,yBAAKrB,UAAU,aACb,yBAAKA,UAAU,yBACb,2CACA,mGAEF,6BACE,yBACEA,UAAU,uDACVsB,UAAQ,iBAEPb,EAAOc,KAAI,SAACC,EAAOC,GAAR,OACV,kBAAC/B,EAAD,CACEC,IAAK6B,EAAME,KAAKC,MAChB9B,GAAI2B,EAAM3B,GACVD,IAAK4B,EAAMI,YACX7B,IAAK0B,EACL3B,OAAO,qBCtCD+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SD8H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.d5788379.chunk.js","sourcesContent":["module.exports = {\n    root: \"https://api.unsplash.com\",\n    accessKey: \"1YqGY7R1ad0vN-xJvt185-YlrbdjQ9V295s5dn_p_HM\",\n    secretKey: \"WA5bVY-9MbGxzGjdpo8OGbzjuLq9iMe8svBG9J3M6jA\"\n};","let Stats = {\n  score: 0,\n  lives: 3\n}\n\nexport default Stats;\n","import React from \"react\";\nimport Stats from \"./Stats\"\n\nexport default function Image({ url, alt, id, status, key }) {\n  const logImage = () => {\n    if (status === \"clicked\") {\n      alert(\"You've already clicked that one\");\n      Stats.score -= 1;\n      alert(\"Current score: \" + Stats.score);\n      Stats.lives -= 1;\n      alert(\"Lives remaining: \" + Stats.lives);\n      if (Stats.lives <= 0) {\n        alert(\"You lose :(\")\n      }\n      console.log(Stats.score);\n    } else if (status === \"unclicked\") {\n      Stats.score += 1;\n      alert(\"Correct!\");\n      alert(\"Current score: \" + Stats.score);\n      status = \"clicked\";\n    }\n  };\n\n  // Still need to figure out how to reshuffle images after each click event\n\n  return (\n    <div>\n      <div\n        className=\"image-item uk-flex uk-flex-center uk-flex-middle\"\n        status=\"unclicked\"\n        key={key}\n      >\n        <img\n          className=\"random-image\"\n          src={url}\n          alt={alt}\n          id={id}\n          onClick={logImage}\n          status={status}\n        />\n      </div>\n    </div>\n  );\n}\n","//@ts-check\n\n// FUNCTIONALITY\nimport React from \"react\";\nimport axios from \"axios\";\nimport keys from \"./keys\";\nimport Image from \"./Image\";\n\n// STYLES\nimport \"../node_modules/uikit/dist/css/uikit.css\";\nimport \"uikit\";\nimport \"./App.css\";\n\nlet Gallery = () => {\n  const [images, setImages] = React.useState([]);\n  const [loaded, setIsLoaded] = React.useState(false);\n\n  const fetchImages = (count = 12) => {\n    const apiRoot = keys.root;\n    const accessKey = keys.accessKey;\n\n    axios\n      .get(`${apiRoot}/photos/random?client_id=${accessKey}&count=${count}`)\n      .then(results => {\n        setImages([...images, ...results.data]);\n        setIsLoaded(true);\n      });\n  };\n\n  React.useEffect(() => {\n    fetchImages();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"uk-header game-header\">\n        <h1>CLICKY GAME</h1>\n        <p>Click the images to score, but don't click on the same image twice!</p>\n      </div>\n      <div>\n        <div\n          className=\"image-grid uk-child-width-1-3@s uk-child-width-1-4@m\"\n          uk-grid=\"masonry: true\"\n        >\n          {images.map((image, index) => (\n            <Image\n              url={image.urls.thumb}\n              id={image.id}\n              alt={image.description}\n              key={index}\n              status=\"unclicked\"\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Gallery;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Gallery from \"./Gallery\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Gallery />, document.getElementById(\"main\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}