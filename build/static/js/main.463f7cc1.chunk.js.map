{"version":3,"sources":["components/Header/Header.js","components/Image/Image.js","images.js","components/Gallery/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Image","props","src","alt","onClick","imageArray","name","url","clicked","score","Gallery","state","images","shuffleImages","counter","length","index","Math","floor","random","temp","image","alert","slice","this","setState","key","handleClick","uk-grid","map","i","renderImage","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kTAWeA,MARf,WACE,OACE,yBAAKC,UAAU,SACb,6C,yCCCSC,MAJf,SAAeC,GACb,OAAO,yBAAKC,IAAKD,EAAMC,IAAKC,IAAKF,EAAME,IAAKC,QAASH,EAAMG,WCqD9CC,EAzDI,CACjB,CACEC,KAAM,OACNC,IACE,6IACFC,SAAS,GAEX,CACEF,KAAM,SACNC,IACE,qIACFC,SAAS,GAEX,CACEF,KAAM,OACNC,IACE,wIACFC,SAAS,GAEX,CACEF,KAAM,OACNC,IACE,qIACFC,SAAS,GAEX,CACEF,KAAM,QACNC,IACE,qIACFC,SAAS,GAEX,CACEF,KAAM,eACNC,IACE,wIACFC,SAAS,GAEX,CACEF,KAAM,YACNC,IACE,wIACFC,SAAS,GAEX,CACEF,KAAM,SACNC,IACE,qIACFC,SAAS,GAEX,CACEF,KAAM,MACNC,IACE,wIACFC,SAAS,IC7CTC,G,kBAAQ,GA+DGC,E,YA5Db,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,MAAQ,CACXC,OAAQ,EAAKC,cAAcR,IAHZ,E,2EAOLO,GAEZ,IADA,IAAIE,EAAUF,EAAOG,OACdD,EAAU,GAAG,CAClB,IAAIE,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,GAGnCM,EAAOR,IAFXE,GAGAF,EAAOE,GAAWF,EAAOI,GACzBJ,EAAOI,GAASI,EAElB,OAAOR,I,kCAGGS,IACY,IAAlBA,EAAMb,SACRa,EAAMb,SAAU,EAChBC,GAAS,EACTa,MAAM,0BAA4Bb,KAExB,IAAVA,EAAeA,EAAQ,EAAMA,GAAS,EACtCa,MAAM,gDAAkDb,IAE1D,IAAMG,EAASP,EAAWkB,QAC1BC,KAAKC,SAAS,CACZb,OAAQY,KAAKX,cAAcD,O,kCAInBS,GAAQ,IAAD,OACjB,OACE,kBAAC,EAAD,CACEK,IAAKL,EAAMd,IACXL,IAAKmB,EAAMd,IACXJ,IAAKkB,EAAMf,KACXF,QAAS,kBAAM,EAAKuB,YAAYN,Q,+BAK5B,IAAD,OACP,OACE,6BACE,yBACEtB,UAAU,uDACV6B,WAAA,GAECJ,KAAKb,MAAMC,OAAOiB,KAAI,SAAAC,GAAC,OAAI,EAAKC,YAAYD,Y,GAtDjCE,IAAMC,W,MCQbC,MAbf,WACE,OACE,yBAAKnC,UAAU,QACb,4BAAQA,UAAU,UAChB,kBAAC,EAAD,OAEF,yBAAKA,UAAU,iBACb,kBAAC,EAAD,SCAYoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.463f7cc1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <div className=\"title\">\n      <h1>CLICKY GAME</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./Image.css\";\n\nfunction Image(props) {\n  return <img src={props.src} alt={props.alt} onClick={props.onClick} />;\n}\n\nexport default Image;\n","const imageArray = [\n  {\n    name: \"moon\",\n    url:\n      \"https://images.unsplash.com/flagged/photo-1556762740-ec7371277a2a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=80\",\n    clicked: false\n  },\n  {\n    name: \"stream\",\n    url:\n      \"https://images.unsplash.com/photo-1559835032-2b305ab3123d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=80\",\n    clicked: false\n  },\n  {\n    name: \"city\",\n    url:\n      \"https://images.unsplash.com/photo-1572276643543-90ec6f977376?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=80\",\n    clicked: false\n  },\n  {\n    name: \"road\",\n    url:\n      \"https://images.unsplash.com/photo-1543177706-8f9cea7d7b7c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=838&q=80\",\n    clicked: false\n  },\n  {\n    name: \"beach\",\n    url:\n      \"https://images.unsplash.com/photo-1553495280-37259d1e6ebc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=827&q=80\",\n    clicked: false\n  },\n  {\n    name: \"seaside town\",\n    url:\n      \"https://images.unsplash.com/photo-1570025796121-87d2d9b69ca9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=80\",\n    clicked: false\n  },\n  {\n    name: \"mountains\",\n    url:\n      \"https://images.unsplash.com/photo-1573221857439-e7686394e706?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=80\",\n    clicked: false\n  },\n  {\n    name: \"island\",\n    url:\n      \"https://images.unsplash.com/photo-1561810605-c7c975936a67?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=793&q=80\",\n    clicked: false\n  },\n  {\n    name: \"ice\",\n    url:\n      \"https://images.unsplash.com/photo-1573489999553-4f904df66f7e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=789&q=80\",\n    clicked: false\n  }\n];\n\nexport default imageArray;\n","import React from \"react\";\nimport Image from \"../Image/Image\";\nimport imageArray from \"../../images\";\nimport \"./Gallery.css\";\n\nimport \"../../../node_modules/uikit/dist/css/uikit.css\";\nimport \"uikit\";\n\nlet score = 0;\n\nclass Gallery extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: this.shuffleImages(imageArray)\n    };\n  }\n\n  shuffleImages(images) {\n    let counter = images.length;\n    while (counter > 0) {\n      let index = Math.floor(Math.random() * counter);\n      counter--;\n\n      let temp = images[counter];\n      images[counter] = images[index];\n      images[index] = temp;\n    }\n    return images;\n  }\n\n  handleClick(image) {\n    if (image.clicked === false) {\n      image.clicked = true;\n      score += 1;\n      alert(\"Correct! Your score is \" + score);\n    } else {\n      score === 0 ? (score = 0) : (score -= 1);\n      alert(\"You already clicked that one! Current score: \" + score);\n    }\n    const images = imageArray.slice();\n    this.setState({\n      images: this.shuffleImages(images)\n    });\n  }\n\n  renderImage(image) {\n    return (\n      <Image\n        key={image.url}\n        src={image.url}\n        alt={image.name}\n        onClick={() => this.handleClick(image)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div\n          className=\"image-grid uk-child-width-1-3@s uk-child-width-1-4@m\"\n          uk-grid\n        >\n          {this.state.images.map(i => this.renderImage(i))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Gallery;\n","import React from \"react\";\nimport Header from \"./components/Header/Header.js\";\nimport Gallery from \"./components/Gallery/Gallery.js\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <header className=\"header\">\n        <Header />\n      </header>\n      <div className=\"gameContainer\">\n        <Gallery />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}